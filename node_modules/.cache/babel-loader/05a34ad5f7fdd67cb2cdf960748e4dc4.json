{"ast":null,"code":"import _slicedToArray from \"E:\\\\React\\\\reactnotesmgr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\React\\\\reactnotesmgr\\\\src\\\\components\\\\register.component.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { registerUser } from './../redux/actions/authActionCreators';\n\nconst RegisterForm = ({\n  dispatchRegisterAction\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        firstName = _useState2[0],\n        setFirstName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        lastName = _useState4[0],\n        setLastName = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        email = _useState6[0],\n        setEmail = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        password = _useState8[0],\n        setPassword = _useState8[1];\n\n  const _useState9 = useState({\n    firstName: false,\n    lastName: false,\n    email: false,\n    password: false\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        error = _useState10[0],\n        setError = _useState10[1];\n\n  const handleOnSubmit = event => {\n    event.preventDefault();\n    if (isFormInvalid()) updateErrorFlags();else dispatchRegisterAction(firstName, lastName, email, password, () => toast.success('Account Created Successfully!'), message => toast.error(`Error: ${message}`));\n  };\n\n  const handleCancelForm = event => {\n    event.preventDefault();\n    setFirstName('');\n    setLastName('');\n    setEmail('');\n    setPassword('');\n    setError({\n      firstName: false,\n      lastName: false,\n      email: false,\n      password: false\n    });\n  };\n\n  const isFormInvalid = () => !firstName || !lastName || !email || !password;\n\n  const updateErrorFlags = () => {\n    const errObj = {\n      firstName: false,\n      lastName: false,\n      email: false,\n      password: false\n    };\n    if (!firstName) errObj.firstName = true;\n    if (!lastName) errObj.lastName = true;\n    if (!email) errObj.email = true;\n    if (!password) errObj.password = true;\n    setError(errObj);\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"New User ?\"), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Create an account\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    noValidate: true,\n    onSubmit: handleOnSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"firstName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"First Name\"), React.createElement(\"input\", {\n    noValidate: true,\n    id: \"firstName\",\n    type: \"text\",\n    name: \"firstName\",\n    placeholder: \"First Name\",\n    value: firstName,\n    onChange: e => setFirstName(e.target.value),\n    className: `form-control ${error.firstName ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Required\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"lastName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Last Name\"), React.createElement(\"input\", {\n    noValidate: true,\n    id: \"lastName\",\n    type: \"text\",\n    name: \"lastName\",\n    placeholder: \"Last Name\",\n    value: lastName,\n    onChange: e => setLastName(e.target.value),\n    className: `form-control ${error.lastName ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Required\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Email Address\"), React.createElement(\"input\", {\n    noValidate: true,\n    id: \"email1\",\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    className: `form-control ${error.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Required\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    noValidate: true,\n    id: \"password1\",\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    className: `form-control ${error.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Required\")), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary mr-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Register | \", React.createElement(\"i\", {\n    className: \"fas fa-user-plus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: handleCancelForm,\n    className: \"btn btn-outline-secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Cancel | \", React.createElement(\"i\", {\n    className: \"fas fa-times\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchRegisterAction: (firstName, lastName, email, password, onSuccess, onError) => dispatch(registerUser({\n    firstName,\n    lastName,\n    email,\n    password\n  }, onSuccess, onError))\n});\n\nexport default connect(null, mapDispatchToProps)(RegisterForm);","map":{"version":3,"sources":["E:/React/reactnotesmgr/src/components/register.component.js"],"names":["React","useState","connect","toast","registerUser","RegisterForm","dispatchRegisterAction","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","error","setError","handleOnSubmit","event","preventDefault","isFormInvalid","updateErrorFlags","success","message","handleCancelForm","errObj","e","target","value","mapDispatchToProps","dispatch","onSuccess","onError"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,YAAT,QAA6B,uCAA7B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgC;AAAA,oBAEfL,QAAQ,CAAC,EAAD,CAFO;AAAA;AAAA,QAE1CM,SAF0C;AAAA,QAE/BC,YAF+B;;AAAA,qBAGjBP,QAAQ,CAAC,EAAD,CAHS;AAAA;AAAA,QAG1CQ,QAH0C;AAAA,QAGhCC,WAHgC;;AAAA,qBAIvBT,QAAQ,CAAC,EAAD,CAJe;AAAA;AAAA,QAI1CU,KAJ0C;AAAA,QAInCC,QAJmC;;AAAA,qBAKjBX,QAAQ,CAAC,EAAD,CALS;AAAA;AAAA,QAK1CY,QAL0C;AAAA,QAKhCC,WALgC;;AAAA,qBAMvBb,QAAQ,CAAC;AAAEM,IAAAA,SAAS,EAAE,KAAb;AAAoBE,IAAAA,QAAQ,EAAE,KAA9B;AAAqCE,IAAAA,KAAK,EAAE,KAA5C;AAAmDE,IAAAA,QAAQ,EAAE;AAA7D,GAAD,CANe;AAAA;AAAA,QAM1CE,KAN0C;AAAA,QAMnCC,QANmC;;AAQjD,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,aAAa,EAAjB,EAAqBC,gBAAgB,GAArC,KACKf,sBAAsB,CAACC,SAAD,EAAYE,QAAZ,EAAsBE,KAAtB,EAA6BE,QAA7B,EACvB,MAAMV,KAAK,CAACmB,OAAN,CAAc,+BAAd,CADiB,EAEtBC,OAAD,IAAapB,KAAK,CAACY,KAAN,CAAa,UAASQ,OAAQ,EAA9B,CAFU,CAAtB;AAGR,GAND;;AAQA,QAAMC,gBAAgB,GAAIN,KAAD,IAAW;AAChCA,IAAAA,KAAK,CAACC,cAAN;AACAX,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,QAAQ,CAAC;AAAET,MAAAA,SAAS,EAAE,KAAb;AAAoBE,MAAAA,QAAQ,EAAE,KAA9B;AAAqCE,MAAAA,KAAK,EAAE,KAA5C;AAAmDE,MAAAA,QAAQ,EAAE;AAA7D,KAAD,CAAR;AACH,GAPD;;AASA,QAAMO,aAAa,GAAG,MAAO,CAACb,SAAD,IAAc,CAACE,QAAf,IAA2B,CAACE,KAA5B,IAAqC,CAACE,QAAnE;;AAEA,QAAMQ,gBAAgB,GAAG,MAAM;AAC3B,UAAMI,MAAM,GAAG;AAAElB,MAAAA,SAAS,EAAE,KAAb;AAAoBE,MAAAA,QAAQ,EAAE,KAA9B;AAAqCE,MAAAA,KAAK,EAAE,KAA5C;AAAmDE,MAAAA,QAAQ,EAAE;AAA7D,KAAf;AACA,QAAI,CAACN,SAAL,EAAgBkB,MAAM,CAAClB,SAAP,GAAmB,IAAnB;AAChB,QAAI,CAACE,QAAL,EAAegB,MAAM,CAAChB,QAAP,GAAkB,IAAlB;AACf,QAAI,CAACE,KAAL,EAAYc,MAAM,CAACd,KAAP,GAAe,IAAf;AACZ,QAAI,CAACE,QAAL,EAAeY,MAAM,CAACZ,QAAP,GAAkB,IAAlB;AACfG,IAAAA,QAAQ,CAACS,MAAD,CAAR;AACH,GAPD;;AASA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAKI;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,QAAQ,EAAER,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAO,IAAA,UAAU,MAAjB;AAAkB,IAAA,EAAE,EAAC,WAArB;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,IAAI,EAAC,WAFT;AAGI,IAAA,WAAW,EAAC,YAHhB;AAII,IAAA,KAAK,EAAEV,SAJX;AAKI,IAAA,QAAQ,EAAGmB,CAAD,IAAOlB,YAAY,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CALjC;AAMI,IAAA,SAAS,EAAG,gBAAeb,KAAK,CAACR,SAAN,GAAkB,YAAlB,GAAiC,EAAG,EANnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,CADJ,EAYI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAO,IAAA,UAAU,MAAjB;AAAkB,IAAA,EAAE,EAAC,UAArB;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,WAAW,EAAC,WAHhB;AAII,IAAA,KAAK,EAAEE,QAJX;AAKI,IAAA,QAAQ,EAAGiB,CAAD,IAAOhB,WAAW,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CALhC;AAMI,IAAA,SAAS,EAAG,gBAAeb,KAAK,CAACN,QAAN,GAAiB,YAAjB,GAAgC,EAAG,EANlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,CAZJ,EAuBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAO,IAAA,UAAU,MAAjB;AAAkB,IAAA,EAAE,EAAC,QAArB;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,WAAW,EAAC,OAHhB;AAII,IAAA,KAAK,EAAEE,KAJX;AAKI,IAAA,QAAQ,EAAGe,CAAD,IAAOd,QAAQ,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAL7B;AAMI,IAAA,SAAS,EAAG,gBAAeb,KAAK,CAACJ,KAAN,GAAc,YAAd,GAA6B,EAAG,EAN/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,CAvBJ,EAkCI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAO,IAAA,UAAU,MAAjB;AAAkB,IAAA,EAAE,EAAC,WAArB;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,WAAW,EAAC,UAHhB;AAII,IAAA,KAAK,EAAEE,QAJX;AAKI,IAAA,QAAQ,EAAGa,CAAD,IAAOZ,WAAW,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CALhC;AAMI,IAAA,SAAS,EAAG,gBAAeb,KAAK,CAACF,QAAN,GAAiB,YAAjB,GAAgC,EAAG,EANlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,CAlCJ,EA8CI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,sBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACe;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADf,CA9CJ,EAiDI;AAAQ,IAAA,OAAO,EAAEW,gBAAjB;AAAmC,IAAA,SAAS,EAAC,2BAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACa;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADb,CAjDJ,CALJ,CADJ;AA6DH,CAjGD;;AAmGA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACpCxB,EAAAA,sBAAsB,EAAE,CAACC,SAAD,EAAYE,QAAZ,EAAsBE,KAAtB,EAA6BE,QAA7B,EAAuCkB,SAAvC,EAAkDC,OAAlD,KACpBF,QAAQ,CAAC1B,YAAY,CAAC;AAAEG,IAAAA,SAAF;AAAaE,IAAAA,QAAb;AAAuBE,IAAAA,KAAvB;AAA8BE,IAAAA;AAA9B,GAAD,EAA2CkB,SAA3C,EAAsDC,OAAtD,CAAb;AAFwB,CAAL,CAAnC;;AAIA,eAAe9B,OAAO,CAAC,IAAD,EAAO2B,kBAAP,CAAP,CAAkCxB,YAAlC,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { registerUser } from './../redux/actions/authActionCreators';\n\nconst RegisterForm = ({ dispatchRegisterAction }) => {\n\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState({ firstName: false, lastName: false, email: false, password: false });\n\n    const handleOnSubmit = (event) => {\n        event.preventDefault();\n        if (isFormInvalid()) updateErrorFlags();\n        else dispatchRegisterAction(firstName, lastName, email, password,\n            () => toast.success('Account Created Successfully!'),\n            (message) => toast.error(`Error: ${message}`));\n    };\n\n    const handleCancelForm = (event) => {\n        event.preventDefault();\n        setFirstName('');\n        setLastName('');\n        setEmail('');\n        setPassword('');\n        setError({ firstName: false, lastName: false, email: false, password: false });\n    };\n\n    const isFormInvalid = () => (!firstName || !lastName || !email || !password);\n\n    const updateErrorFlags = () => {\n        const errObj = { firstName: false, lastName: false, email: false, password: false };\n        if (!firstName) errObj.firstName = true;\n        if (!lastName) errObj.lastName = true;\n        if (!email) errObj.email = true;\n        if (!password) errObj.password = true;\n        setError(errObj);\n    };\n\n    return (\n        <React.Fragment>\n            <h2>New User ?</h2>\n            <h4>Create an account</h4>\n            <br />\n\n            <form noValidate onSubmit={handleOnSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"firstName\">First Name</label>\n                    <input noValidate id=\"firstName\"\n                        type=\"text\"\n                        name=\"firstName\"\n                        placeholder=\"First Name\"\n                        value={firstName}\n                        onChange={(e) => setFirstName(e.target.value)}\n                        className={`form-control ${error.firstName ? 'is-invalid' : ''}`} />\n                    <p className=\"invalid-feedback\">Required</p>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"lastName\">Last Name</label>\n                    <input noValidate id=\"lastName\"\n                        type=\"text\"\n                        name=\"lastName\"\n                        placeholder=\"Last Name\"\n                        value={lastName}\n                        onChange={(e) => setLastName(e.target.value)}\n                        className={`form-control ${error.lastName ? 'is-invalid' : ''}`} />\n                    <p className=\"invalid-feedback\">Required</p>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"email1\">Email Address</label>\n                    <input noValidate id=\"email1\"\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        className={`form-control ${error.email ? 'is-invalid' : ''}`} />\n                    <p className=\"invalid-feedback\">Required</p>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password1\">Password</label>\n                    <input noValidate id=\"password1\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        className={`form-control ${error.password ? 'is-invalid' : ''}`} />\n                    <p className=\"invalid-feedback\">Required</p>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Register | <i className=\"fas fa-user-plus\"></i>\n                </button>\n                <button onClick={handleCancelForm} className=\"btn btn-outline-secondary\">\n                    Cancel | <i className=\"fas fa-times\"></i>\n                </button>\n            </form>\n        </React.Fragment>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    dispatchRegisterAction: (firstName, lastName, email, password, onSuccess, onError) =>\n        dispatch(registerUser({ firstName, lastName, email, password }, onSuccess, onError))\n});\nexport default connect(null, mapDispatchToProps)(RegisterForm);\n"]},"metadata":{},"sourceType":"module"}