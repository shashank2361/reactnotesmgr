{"ast":null,"code":"import * as constants from './../constants';\nexport default function notesReducer(state = [], action) {\n  switch (action.type) {\n    case constants.SET_ALL_NOTES:\n      return action.payload;\n\n    case constants.ADD_NOTE:\n      return state.concat(action.payload);\n\n    case constants.REMOVE_NOTE:\n      return state.filter(item => item._id !== action.payload);\n\n    case constants.UPDATE_NOTE:\n      return state.map(item => {\n        if (item._id === action.payload.noteId) return { ...item,\n          ...action.payload.data\n        };else return item;\n      });\n\n    case constants.RESET_USER_INFO:\n      return [];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/React/reactnotesmgr/src/redux/reducers/notesReducer.js"],"names":["constants","notesReducer","state","action","type","SET_ALL_NOTES","payload","ADD_NOTE","concat","REMOVE_NOTE","filter","item","_id","UPDATE_NOTE","map","noteId","data","RESET_USER_INFO"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,gBAA3B;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAK,GAAG,EAA9B,EAAkCC,MAAlC,EAA0C;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,SAAS,CAACK,aAAf;AACI,aAAOF,MAAM,CAACG,OAAd;;AACJ,SAAKN,SAAS,CAACO,QAAf;AACI,aAAOL,KAAK,CAACM,MAAN,CAAaL,MAAM,CAACG,OAApB,CAAP;;AACJ,SAAKN,SAAS,CAACS,WAAf;AACI,aAAOP,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaT,MAAM,CAACG,OAAzC,CAAP;;AACJ,SAAKN,SAAS,CAACa,WAAf;AACI,aAAOX,KAAK,CAACY,GAAN,CAAUH,IAAI,IAAI;AACrB,YAAIA,IAAI,CAACC,GAAL,KAAaT,MAAM,CAACG,OAAP,CAAeS,MAAhC,EACI,OAAO,EAAE,GAAGJ,IAAL;AAAW,aAAGR,MAAM,CAACG,OAAP,CAAeU;AAA7B,SAAP,CADJ,KAGI,OAAOL,IAAP;AACP,OALM,CAAP;;AAMJ,SAAKX,SAAS,CAACiB,eAAf;AACI,aAAO,EAAP;;AACJ;AACI,aAAOf,KAAP;AAjBR;AAmBH","sourcesContent":["import * as constants from './../constants';\n\nexport default function notesReducer(state = [], action) {\n    switch (action.type) {\n        case constants.SET_ALL_NOTES:\n            return action.payload;\n        case constants.ADD_NOTE:\n            return state.concat(action.payload);\n        case constants.REMOVE_NOTE:\n            return state.filter(item => item._id !== action.payload);\n        case constants.UPDATE_NOTE:\n            return state.map(item => {\n                if (item._id === action.payload.noteId)\n                    return { ...item, ...action.payload.data };\n                else\n                    return item;\n            });\n        case constants.RESET_USER_INFO:\n            return [];\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}