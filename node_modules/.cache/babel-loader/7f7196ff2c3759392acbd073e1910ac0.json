{"ast":null,"code":"import * as constants from './../constants';\nexport const registerUser = (data, onSuccess, onError) => ({\n  type: constants.API,\n  payload: {\n    method: 'POST',\n    url: '/api/users/register',\n    data,\n    success: response => setUserInfo(response),\n    postProcessSuccess: onSuccess,\n    postProcessError: onError\n  }\n});\nexport const loginUser = (data, onSuccess, onError) => ({\n  type: constants.API,\n  payload: {\n    method: 'POST',\n    url: '/api/users/login',\n    data,\n    success: response => setUserInfo(response),\n    postProcessSuccess: onSuccess,\n    postProcessError: onError\n  }\n});\nexport const logoutUser = () => {\n  localStorage.removeItem('USER_INFO');\n  return {\n    type: constants.RESET_USER_INFO\n  };\n};\n\nconst setUserInfo = data => {\n  const parsedToken = JSON.parse(atob(data.token.split('.')[1]));\n  const userInfo = {\n    userId: parsedToken.id,\n    fullName: `${parsedToken.firstName} ${parsedToken.lastName}`,\n    token: data.token,\n    isLoggedIn: true\n  };\n  localStorage.setItem('USER_INFO', JSON.stringify(userInfo));\n  return {\n    type: constants.SET_USER_INFO,\n    payload: userInfo\n  };\n};","map":{"version":3,"sources":["E:/React/reactnotesmgr/src/redux/actions/authActionCreators.js"],"names":["constants","registerUser","data","onSuccess","onError","type","API","payload","method","url","success","response","setUserInfo","postProcessSuccess","postProcessError","loginUser","logoutUser","localStorage","removeItem","RESET_USER_INFO","parsedToken","JSON","parse","atob","token","split","userInfo","userId","id","fullName","firstName","lastName","isLoggedIn","setItem","stringify","SET_USER_INFO"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,gBAA3B;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,OAAlB,MAA+B;AACvDC,EAAAA,IAAI,EAAEL,SAAS,CAACM,GADuC;AAEvDC,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,GAAG,EAAE,qBAFA;AAGLP,IAAAA,IAHK;AAILQ,IAAAA,OAAO,EAAGC,QAAD,IAAeC,WAAW,CAACD,QAAD,CAJ9B;AAKLE,IAAAA,kBAAkB,EAAEV,SALf;AAMLW,IAAAA,gBAAgB,EAAEV;AANb;AAF8C,CAA/B,CAArB;AAYP,OAAO,MAAMW,SAAS,GAAG,CAACb,IAAD,EAAOC,SAAP,EAAkBC,OAAlB,MAA+B;AACpDC,EAAAA,IAAI,EAAEL,SAAS,CAACM,GADoC;AAEpDC,EAAAA,OAAO,EAAE;AACLC,IAAAA,MAAM,EAAE,MADH;AAELC,IAAAA,GAAG,EAAE,kBAFA;AAGLP,IAAAA,IAHK;AAILQ,IAAAA,OAAO,EAAGC,QAAD,IAAeC,WAAW,CAACD,QAAD,CAJ9B;AAKLE,IAAAA,kBAAkB,EAAEV,SALf;AAMLW,IAAAA,gBAAgB,EAAEV;AANb;AAF2C,CAA/B,CAAlB;AAYP,OAAO,MAAMY,UAAU,GAAG,MAAM;AAC5BC,EAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACA,SAAO;AAAEb,IAAAA,IAAI,EAAEL,SAAS,CAACmB;AAAlB,GAAP;AACH,CAHM;;AAKP,MAAMP,WAAW,GAAIV,IAAD,IAAU;AAC1B,QAAMkB,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACrB,IAAI,CAACsB,KAAL,CAAWC,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,CAAf,CAApB;AACA,QAAMC,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAEP,WAAW,CAACQ,EADP;AAEbC,IAAAA,QAAQ,EAAG,GAAET,WAAW,CAACU,SAAU,IAAGV,WAAW,CAACW,QAAS,EAF9C;AAGbP,IAAAA,KAAK,EAAEtB,IAAI,CAACsB,KAHC;AAIbQ,IAAAA,UAAU,EAAE;AAJC,GAAjB;AAMAf,EAAAA,YAAY,CAACgB,OAAb,CAAqB,WAArB,EAAkCZ,IAAI,CAACa,SAAL,CAAeR,QAAf,CAAlC;AACA,SAAO;AAAErB,IAAAA,IAAI,EAAEL,SAAS,CAACmC,aAAlB;AAAiC5B,IAAAA,OAAO,EAAEmB;AAA1C,GAAP;AACH,CAVD","sourcesContent":["import * as constants from './../constants';\n\nexport const registerUser = (data, onSuccess, onError) => ({\n    type: constants.API,\n    payload: {\n        method: 'POST',\n        url: '/api/users/register',\n        data,\n        success: (response) => (setUserInfo(response)),\n        postProcessSuccess: onSuccess,\n        postProcessError: onError\n    }\n});\n\nexport const loginUser = (data, onSuccess, onError) => ({\n    type: constants.API,\n    payload: {\n        method: 'POST',\n        url: '/api/users/login',\n        data,\n        success: (response) => (setUserInfo(response)),\n        postProcessSuccess: onSuccess,\n        postProcessError: onError\n    }\n});\n\nexport const logoutUser = () => {\n    localStorage.removeItem('USER_INFO');\n    return { type: constants.RESET_USER_INFO };\n};\n\nconst setUserInfo = (data) => {\n    const parsedToken = JSON.parse(atob(data.token.split('.')[1]));\n    const userInfo = {\n        userId: parsedToken.id,\n        fullName: `${parsedToken.firstName} ${parsedToken.lastName}`,\n        token: data.token,\n        isLoggedIn: true\n    };\n    localStorage.setItem('USER_INFO', JSON.stringify(userInfo));\n    return { type: constants.SET_USER_INFO, payload: userInfo };\n};\n"]},"metadata":{},"sourceType":"module"}