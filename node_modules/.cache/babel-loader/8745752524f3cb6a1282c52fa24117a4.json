{"ast":null,"code":"import _slicedToArray from \"E:\\\\React\\\\reactnotesmgr\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\React\\\\reactnotesmgr\\\\src\\\\components\\\\login.component.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { loginUser } from './../redux/actions/authActionCreators';\n\nconst LoginForm = ({\n  dispatchLoginAction\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        email = _useState2[0],\n        setEmail = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useState5 = useState({\n    email: false,\n    password: false\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const handleOnSubmit = event => {\n    event.preventDefault();\n    if (isFormInvalid()) updateErrorFlags();else dispatchLoginAction(email, password, () => toast.success(\"Logged In Successfully!\"), message => toast.error(`Error: ${message}`));\n  };\n\n  const handleCancelForm = event => {\n    event.preventDefault();\n    setEmail('');\n    setPassword('');\n    setError({\n      email: false,\n      password: false\n    });\n  };\n\n  const isFormInvalid = () => !email || !password;\n\n  const updateErrorFlags = () => {\n    const errObj = {\n      email: false,\n      password: false\n    };\n    if (!email.trim()) errObj.email = true;\n    if (!password.trim()) errObj.password = true;\n    setError(errObj);\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Have an Account ?\"), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Login here\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    noValidate: true,\n    onSubmit: handleOnSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Email Address\"), React.createElement(\"input\", {\n    noValidate: true,\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    className: `form-control ${error.email ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Required\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    noValidate: true,\n    id: \"password\",\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    className: `form-control ${error.password ? 'is-invalid' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Required\")), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary mr-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Login | \", React.createElement(\"i\", {\n    className: \"fas fa-sign-in-alt\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: handleCancelForm,\n    className: \"btn btn-outline-secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Cancel | \", React.createElement(\"i\", {\n    className: \"fas fa-times\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchLoginAction: (email, password, onSuccess, onError) => dispatch(loginUser({\n    email,\n    password\n  }, onSuccess, onError))\n});\n\nexport default connect(null, mapDispatchToProps)(LoginForm);","map":{"version":3,"sources":["E:/React/reactnotesmgr/src/components/login.component.js"],"names":["React","useState","connect","toast","loginUser","LoginForm","dispatchLoginAction","email","setEmail","password","setPassword","error","setError","handleOnSubmit","event","preventDefault","isFormInvalid","updateErrorFlags","success","message","handleCancelForm","errObj","trim","e","target","value","mapDispatchToProps","dispatch","onSuccess","onError"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { loginUser } from './../redux/actions/authActionCreators';\n\nconst LoginForm = ({ dispatchLoginAction }) => {\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState({ email: false, password: false });\n\n    const handleOnSubmit = (event) => {\n        event.preventDefault();\n        if (isFormInvalid()) updateErrorFlags();\n        else dispatchLoginAction(email, password,\n            () => toast.success(\"Logged In Successfully!\"),\n            (message) => toast.error(`Error: ${message}`));\n    };\n\n    const handleCancelForm = event => {\n        event.preventDefault();\n        setEmail('');\n        setPassword('');\n        setError({ email: false, password: false });\n    };\n\n    const isFormInvalid = () => (!email || !password);\n\n    const updateErrorFlags = () => {\n        const errObj = { email: false, password: false };\n        if (!email.trim()) errObj.email = true;\n        if (!password.trim()) errObj.password = true;\n        setError(errObj);\n    };\n\n    return (\n        <React.Fragment>\n            <h2>Have an Account ?</h2>\n            <h4>Login here</h4>\n            <br />\n\n            <form noValidate onSubmit={handleOnSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email Address</label>\n                    <input noValidate id=\"email\"\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        className={`form-control ${error.email ? 'is-invalid' : ''}`} />\n                    <p className=\"invalid-feedback\">Required</p>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\">Password</label>\n                    <input noValidate id=\"password\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        className={`form-control ${error.password ? 'is-invalid' : ''}`} />\n                    <p className=\"invalid-feedback\">Required</p>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary mr-2\">\n                    Login | <i className=\"fas fa-sign-in-alt\"></i>\n                </button>\n                <button onClick={handleCancelForm} className=\"btn btn-outline-secondary\">\n                    Cancel | <i className=\"fas fa-times\"></i>\n                </button>\n            </form>\n        </React.Fragment>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    dispatchLoginAction: (email, password, onSuccess, onError) =>\n        dispatch(loginUser({ email, password }, onSuccess, onError))\n});\nexport default connect(null, mapDispatchToProps)(LoginForm);\n"]},"metadata":{},"sourceType":"module"}