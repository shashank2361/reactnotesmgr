{"ast":null,"code":"import axios from 'axios';\nimport * as constants from './constants';\nimport { logoutUser } from './actions/authActionCreators';\nexport const apiMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  if (action.type !== constants.API) return next(action);\n  dispatch({\n    type: constants.TOGGLE_LOADER\n  });\n  const BASE_URL = 'http://localhost:3300';\n  const AUTH_TOKEN = getState().user.token;\n  if (AUTH_TOKEN) axios.defaults.headers.common['Authorization'] = `Bearer ${AUTH_TOKEN}`;\n  const _action$payload = action.payload,\n        url = _action$payload.url,\n        method = _action$payload.method,\n        success = _action$payload.success,\n        data = _action$payload.data,\n        postProcessSuccess = _action$payload.postProcessSuccess,\n        postProcessError = _action$payload.postProcessError;\n  axios({\n    method,\n    url: BASE_URL + url,\n    data: data ? data : null\n  }).then(response => {\n    dispatch({\n      type: constants.TOGGLE_LOADER\n    });\n    if (success) dispatch(success(response.data));\n    if (postProcessSuccess) postProcessSuccess(response.data);\n  }).catch(err => {\n    dispatch({\n      type: constants.TOGGLE_LOADER\n    });\n    if (!err.response) console.warn(err);else {\n      if (err.response && err.response.status === 403) dispatch(logoutUser());\n\n      if (err.response.data.error.message) {\n        if (postProcessError) postProcessError(err.response.data.error.message);\n      }\n    }\n  });\n};","map":{"version":3,"sources":["E:/React/reactnotesmgr/src/redux/middlewares.js"],"names":["axios","constants","logoutUser","apiMiddleware","dispatch","getState","next","action","type","API","TOGGLE_LOADER","BASE_URL","AUTH_TOKEN","user","token","defaults","headers","common","payload","url","method","success","data","postProcessSuccess","postProcessError","then","response","catch","err","console","warn","status","error","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,SAASC,UAAT,QAA2B,8BAA3B;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4BC,IAAI,IAAIC,MAAM,IAAI;AACvE,MAAIA,MAAM,CAACC,IAAP,KAAgBP,SAAS,CAACQ,GAA9B,EAAmC,OAAOH,IAAI,CAACC,MAAD,CAAX;AAEnCH,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEP,SAAS,CAACS;AAAlB,GAAD,CAAR;AACA,QAAMC,QAAQ,GAAG,uBAAjB;AACA,QAAMC,UAAU,GAAGP,QAAQ,GAAGQ,IAAX,CAAgBC,KAAnC;AACA,MAAIF,UAAJ,EACIZ,KAAK,CAACe,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASL,UAAW,EAAtE;AAPmE,0BAQML,MAAM,CAACW,OARb;AAAA,QAQ/DC,GAR+D,mBAQ/DA,GAR+D;AAAA,QAQ1DC,MAR0D,mBAQ1DA,MAR0D;AAAA,QAQlDC,OARkD,mBAQlDA,OARkD;AAAA,QAQzCC,IARyC,mBAQzCA,IARyC;AAAA,QAQnCC,kBARmC,mBAQnCA,kBARmC;AAAA,QAQfC,gBARe,mBAQfA,gBARe;AAUvExB,EAAAA,KAAK,CAAC;AACFoB,IAAAA,MADE;AAEFD,IAAAA,GAAG,EAAER,QAAQ,GAAGQ,GAFd;AAGFG,IAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU;AAHlB,GAAD,CAAL,CAIGG,IAJH,CAISC,QAAD,IAAc;AAClBtB,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEP,SAAS,CAACS;AAAlB,KAAD,CAAR;AACA,QAAIW,OAAJ,EAAajB,QAAQ,CAACiB,OAAO,CAACK,QAAQ,CAACJ,IAAV,CAAR,CAAR;AACb,QAAIC,kBAAJ,EAAwBA,kBAAkB,CAACG,QAAQ,CAACJ,IAAV,CAAlB;AAC3B,GARD,EAQGK,KARH,CAQSC,GAAG,IAAI;AACZxB,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEP,SAAS,CAACS;AAAlB,KAAD,CAAR;AACA,QAAI,CAACkB,GAAG,CAACF,QAAT,EAAmBG,OAAO,CAACC,IAAR,CAAaF,GAAb,EAAnB,KACK;AACD,UAAIA,GAAG,CAACF,QAAJ,IAAgBE,GAAG,CAACF,QAAJ,CAAaK,MAAb,KAAwB,GAA5C,EACI3B,QAAQ,CAACF,UAAU,EAAX,CAAR;;AACJ,UAAI0B,GAAG,CAACF,QAAJ,CAAaJ,IAAb,CAAkBU,KAAlB,CAAwBC,OAA5B,EAAqC;AACjC,YAAIT,gBAAJ,EAAsBA,gBAAgB,CAACI,GAAG,CAACF,QAAJ,CAAaJ,IAAb,CAAkBU,KAAlB,CAAwBC,OAAzB,CAAhB;AACzB;AACJ;AACJ,GAlBD;AAmBH,CA7BM","sourcesContent":["import axios from 'axios';\n\nimport * as constants from './constants';\nimport { logoutUser } from './actions/authActionCreators';\n\nexport const apiMiddleware = ({ dispatch, getState }) => next => action => {\n    if (action.type !== constants.API) return next(action);\n\n    dispatch({ type: constants.TOGGLE_LOADER });\n    const BASE_URL = 'http://localhost:3300';\n    const AUTH_TOKEN = getState().user.token;\n    if (AUTH_TOKEN)\n        axios.defaults.headers.common['Authorization'] = `Bearer ${AUTH_TOKEN}`;\n    const { url, method, success, data, postProcessSuccess, postProcessError } = action.payload;\n\n    axios({\n        method,\n        url: BASE_URL + url,\n        data: data ? data : null\n    }).then((response) => {\n        dispatch({ type: constants.TOGGLE_LOADER });\n        if (success) dispatch(success(response.data));\n        if (postProcessSuccess) postProcessSuccess(response.data);\n    }).catch(err => {\n        dispatch({ type: constants.TOGGLE_LOADER });\n        if (!err.response) console.warn(err);\n        else {\n            if (err.response && err.response.status === 403)\n                dispatch(logoutUser());\n            if (err.response.data.error.message) {\n                if (postProcessError) postProcessError(err.response.data.error.message);\n            }\n        }\n    })\n};\n"]},"metadata":{},"sourceType":"module"}